package components

import (
	"encoding/json"
	"fmt"

	"github.com/infra-rdc/rudder-go/internal/utils"
)

// GroupNewComposition - Boolean operator to use between each  `where` criteria.
type GroupNewComposition string

const (
	GroupNewCompositionAnd GroupNewComposition = "and"
	GroupNewCompositionOr  GroupNewComposition = "or"
)

func (e GroupNewComposition) ToPointer() *GroupNewComposition {
	return &e
}
func (e *GroupNewComposition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "and":
		fallthrough
	case "or":
		*e = GroupNewComposition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupNewComposition: %v", v)
	}
}

type GroupNewWhere struct {
	// Type of the object
	ObjectType *string `json:"objectType,omitempty"`
	// Attribute to compare
	Attribute *string `json:"attribute,omitempty"`
	// Comparator to use
	Comparator *string `json:"comparator,omitempty"`
	// Value to compare against
	Value *string `json:"value,omitempty"`
}

func (o *GroupNewWhere) GetObjectType() *string {
	if o == nil {
		return nil
	}
	return o.ObjectType
}

func (o *GroupNewWhere) GetAttribute() *string {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *GroupNewWhere) GetComparator() *string {
	if o == nil {
		return nil
	}
	return o.Comparator
}

func (o *GroupNewWhere) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// GroupNewQuery - The criteria defining the group. If not provided, the group will be empty.
type GroupNewQuery struct {
	// What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.
	Select *string `default:"node" json:"select"`
	// Boolean operator to use between each  `where` criteria.
	Composition *GroupNewComposition `default:"and" json:"composition"`
	// List of criteria
	Where []GroupNewWhere `json:"where,omitempty"`
}

func (g GroupNewQuery) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupNewQuery) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GroupNewQuery) GetSelect() *string {
	if o == nil {
		return nil
	}
	return o.Select
}

func (o *GroupNewQuery) GetComposition() *GroupNewComposition {
	if o == nil {
		return nil
	}
	return o.Composition
}

func (o *GroupNewQuery) GetWhere() []GroupNewWhere {
	if o == nil {
		return nil
	}
	return o.Where
}

type GroupNewProperties struct {
	// Property name
	Name string `json:"name"`
	// Property value (can be a string or JSON object)
	Value any `json:"value"`
}

func (o *GroupNewProperties) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GroupNewProperties) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type GroupNew struct {
	// The id of the group the clone will be based onto. If this parameter if provided,  the new group will be a clone of this source. Other value will override values from the source.
	Source *string `json:"source,omitempty"`
	// Id of the new group's category
	Category string `json:"category"`
	// Group id, only provide it when needed.
	ID *string `default:"{autogenerated}" json:"id"`
	// Name of the group
	DisplayName string `json:"displayName"`
	// Group description
	Description *string `json:"description,omitempty"`
	// The criteria defining the group. If not provided, the group will be empty.
	Query *GroupNewQuery `json:"query,omitempty"`
	// Should the group be dynamically refreshed (if not, it is a static group)
	Dynamic *bool `default:"true" json:"dynamic"`
	// Enable or disable the group
	Enabled *bool `default:"true" json:"enabled"`
	// Group properties
	Properties []GroupNewProperties `json:"properties,omitempty"`
}

func (g GroupNew) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupNew) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GroupNew) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GroupNew) GetCategory() string {
	if o == nil {
		return ""
	}
	return o.Category
}

func (o *GroupNew) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GroupNew) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *GroupNew) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GroupNew) GetQuery() *GroupNewQuery {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GroupNew) GetDynamic() *bool {
	if o == nil {
		return nil
	}
	return o.Dynamic
}

func (o *GroupNew) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *GroupNew) GetProperties() []GroupNewProperties {
	if o == nil {
		return nil
	}
	return o.Properties
}
